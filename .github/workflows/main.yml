name: Build & Release PyWarp

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Flake8
        run: |
          pip install flake8
          flake8 main.py

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: validate
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        shell: bash
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build Executable
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          python -m nuitka main.py `
            --standalone `
            --onefile `
            --disable-console `
            --enable-plugin=pyside6 `
            --nofollow-imports `
            --noinclude-pytest-mode=nofollow `
            --noinclude-unittest-mode=nofollow `
            --nofollow-import-to=tkinter,test,pydoc `
            --include-data-dir=assets=assets `
            --include-qt-plugins=all `
            --windows-icon-from-ico=assets/logo.ico `
            --output-dir=dist `
            --output-filename="pywarp-windows-v$version" `
            --windows-company-name="PyWarp" `
            --windows-product-name="PyWarp" `
            --windows-file-version="$version" `
            --windows-product-version="$version" `
            --remove-output `
            --assume-yes-for-downloads
      - name: Zip Executable
        run: |
          cd dist
          powershell Compress-Archive -Path pywarp-windows-v${{ steps.version.outputs.version }}.exe -DestinationPath pywarp-windows-v${{ steps.version.outputs.version }}.zip
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-windows
          path: dist/pywarp-windows-v${{ steps.version.outputs.version }}.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    needs: build-windows
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        shell: bash
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build Executable
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          python -m nuitka main.py \
            --standalone \
            --onefile \
            --remove-output \
            --disable-console \
            --enable-plugin=pyside6 \
            --include-data-dir=assets=assets \
            --include-qt-plugins=all \
            --output-filename="pywarp-ubuntu-v$VERSION"
      - name: Zip Executable
        run: zip pywarp-ubuntu-v${{ steps.version.outputs.version }}.zip pywarp-ubuntu-v${{ steps.version.outputs.version }}
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-ubuntu
          path: pywarp-ubuntu-v${{ steps.version.outputs.version }}.zip

  build-macos-universal:
    name: Build macOS Universal
    runs-on: macos-13
    strategy:
      matrix:
        arch: [x86_64, arm64]
    needs: build-windows
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        shell: bash
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build PyWarp for ${{ matrix.arch }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ matrix.arch }}"
          python -m nuitka main.py \
            --standalone \
            --remove-output \
            --disable-console \
            --enable-plugin=pyside6 \
            --macos-create-app-bundle \
            --macos-app-name=PyWarp \
            --macos-app-icon=assets/logo.icns \
            --macos-app-version="$VERSION" \
            --include-data-dir=assets=assets \
            --include-qt-plugins=all \
            --output-filename="pywarp-${ARCH}" \
            --clang \
            --macos-target-arch=${ARCH}
      - name: Rename Binary
        run: |
          mv pywarp-${{ matrix.arch }}.app/Contents/MacOS/pywarp pywarp-${{ matrix.arch }}.app/Contents/MacOS/pywarp-${{ matrix.arch }}
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-${{ matrix.arch }}
          path: pywarp-${{ matrix.arch }}.app

  merge-macos-universal:
    name: Merge macOS Universal Binary
    runs-on: macos-13
    needs: build-macos-universal
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Merge with lipo
        run: |
          APP_X86=$(find artifacts -name "pywarp-x86_64.app" -type d)
          APP_ARM=$(find artifacts -name "pywarp-arm64.app" -type d)
          mkdir -p PyWarp.app/Contents/MacOS
          lipo -create \
            "$APP_X86/Contents/MacOS/pywarp-x86_64" \
            "$APP_ARM/Contents/MacOS/pywarp-arm64" \
            -output PyWarp.app/Contents/MacOS/pywarp
          chmod +x PyWarp.app/Contents/MacOS/pywarp
          cp -R "$APP_ARM/Contents/Resources" PyWarp.app/Contents/
          cp "$APP_ARM/Contents/Info.plist" PyWarp.app/Contents/
          rm -rf "$APP_X86" "$APP_ARM"
      - name: Create DMG
        run: |
          hdiutil create -volname PyWarp -srcfolder PyWarp.app -ov -format UDZO pywarp-macos-universal.dmg
      - name: Zip Universal App
        run: zip -r pywarp-macos-universal-v${{ needs.build-windows.outputs.version }}.zip PyWarp.app
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-macos-universal
          path: |
            pywarp-macos-universal-v${{ needs.build-windows.outputs.version }}.zip
            pywarp-macos-universal.dmg
      - name: Cleanup
        run: rm -rf PyWarp.app pywarp-macos-universal.dmg pywarp-macos-universal-v${{ needs.build-windows.outputs.version }}.zip

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [build-windows, build-linux, merge-macos-universal]
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Extract Changelog for Release
        id: changelog
        run: |
          VERSION="v${{ steps.version.outputs.version }}"
          awk -v ver="$VERSION" '
            $0 ~ "^## " ver {flag=1; next}
            flag && /^## / {exit}
            flag {print}
          ' CHANGELOG.md > RELEASE_NOTES.md
          echo -e "\n---\nBuilt for Windows, Linux, and macOS (Universal)" >> RELEASE_NOTES.md
      - name: Generate Checksums and Downloads Section
        run: |
          VERSION="v${{ steps.version.outputs.version }}"
          WIN_FILE=$(find artifacts -name "pywarp-windows-*.zip" | head -n1)
          LINUX_FILE=$(find artifacts -name "pywarp-ubuntu-*.zip" | head -n1)
          MAC_FILE=$(find artifacts -name "pywarp-macos-universal-*.zip" | head -n1)

          WIN_SHA=$(sha256sum "$WIN_FILE" | cut -d' ' -f1)
          LINUX_SHA=$(sha256sum "$LINUX_FILE" | cut -d' ' -f1)
          MAC_SHA=$(sha256sum "$MAC_FILE" | cut -d' ' -f1)

          {
            echo ""
            echo "### 📦 Downloads"
            echo ""
            echo "| Platform | File | SHA256 Checksum |"
            echo "|----------|------|-----------------|"
            echo "| 🪟 Windows | [Download EXE](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $WIN_FILE)) | \`$WIN_SHA\` |"
            echo "| 🐧 Linux | [Download Binary](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $LINUX_FILE)) | \`$LINUX_SHA\` |"
            echo "| 🍎 macOS | [Download App](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $MAC_FILE)) | \`$MAC_SHA\` |"
            echo ""
            echo "To verify integrity:"
            echo "- On macOS/Linux: \`shasum -a 256 [file]\`"
            echo "- On Windows (PowerShell): \`Get-FileHash .\\[file] -Algorithm SHA256\`"
            echo ""
            echo "---"
            echo ""
            echo "### 🛡 Is it safe?"
            echo ""
            echo "Yes. Some antivirus tools may falsely flag the \`.exe\` because it’s unsigned and built with Nuitka."
            echo ""
            echo "- ✅ Open-source and transparent: [GitHub Repo](https://github.com/${{ github.repository }})  "
            echo "- 🔐 We're working on signing future releases"
            echo ""
            echo "If flagged, you can submit the \`.exe\` to Microsoft as a false positive or build it yourself from source."
          } >> RELEASE_NOTES.md
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: PyWarp v${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/pywarp-*.zip
            artifacts/**/pywarp-*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
