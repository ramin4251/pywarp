name: Build & Release PyWarp

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: write

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Flake8
        run: |
          pip install flake8
          flake8 . || true

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    needs: validate
    outputs:
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        shell: bash
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build Executable
        shell: pwsh
        run: |
          $version = "${{ steps.version.outputs.version }}"
          python -m nuitka main.py `
            --standalone `
            --onefile `
            --disable-console `
            --enable-plugin=pyside6 `
            --nofollow-imports `
            --noinclude-pytest-mode=nofollow `
            --noinclude-unittest-mode=nofollow `
            --nofollow-import-to=tkinter,test,pydoc `
            --include-data-dir=assets=assets `
            --include-qt-plugins=all `
            --windows-icon-from-ico=assets/logo.ico `
            --output-dir=dist `
            --output-filename="pywarp-windows-v$version" `
            --windows-company-name="PyWarp" `
            --windows-product-name="PyWarp" `
            --windows-file-version="$version" `
            --windows-product-version="$version" `
            --remove-output `
            --assume-yes-for-downloads
      - name: Zip Executable
        run: |
          cd dist
          powershell Compress-Archive -Path pywarp-windows-v${{ steps.version.outputs.version }}.exe -DestinationPath pywarp-windows-v${{ steps.version.outputs.version }}.zip
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-windows
          path: dist/pywarp-windows-v${{ steps.version.outputs.version }}.zip

  build-linux:
    name: Build Linux
    runs-on: ubuntu-22.04
    needs: build-windows
    steps:
      - uses: actions/checkout@v3
      - name: Read Version
        id: version
        shell: bash
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build Executable
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          python -m nuitka main.py \
            --standalone \
            --onefile \
            --remove-output \
            --disable-console \
            --enable-plugin=pyside6 \
            --include-data-dir=assets=assets \
            --include-qt-plugins=all \
            --output-filename="pywarp-ubuntu-v$VERSION"
      - name: Create tar.gz
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          tar -czvf pywarp-ubuntu-v$VERSION.tar.gz pywarp-ubuntu-v$VERSION
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-ubuntu
          path: pywarp-ubuntu-v${{ steps.version.outputs.version }}.tar.gz

  build-macos-universal:
    name: Build macOS Universal
    runs-on: macos-13
    strategy:
      matrix:
        arch: [x86_64, arm64]
    needs: build-windows
    steps:
      - uses: actions/checkout@v3

      - name: Read Version
        id: version
        shell: bash
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5

      - name: Build PyWarp for ${{ matrix.arch }}
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ matrix.arch }}"
          python -m nuitka main.py \
            --standalone \
            --remove-output \
            --disable-console \
            --enable-plugin=pyside6 \
            --macos-create-app-bundle \
            --macos-app-name="pywarp-${ARCH}" \
            --macos-app-icon=assets/logo.icns \
            --macos-app-version="$VERSION" \
            --include-data-dir=assets=assets \
            --include-qt-plugins=iconengines,imageformats,platforms,styles,tls,sqldrivers=libqsqlite.dylib \
            --noinclude-dlls=libcrypto.dylib \
            --noinclude-dlls=libssl.dylib \
            --output-dir=. \
            --clang \
            --macos-target-arch=${ARCH} \
            --assume-yes-for-downloads \
            --disable-ccache

      - name: Rename .app bundle to include version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ matrix.arch }}"
          if [[ ! -d main.app ]]; then
            echo "❌ Error: main.app not found after build."
            find . -maxdepth 2
            exit 1
          fi
          mv main.app "pywarp-v$VERSION-$ARCH.app"

      - name: Zip .app bundle
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          ARCH="${{ matrix.arch }}"
          APP_PATH="pywarp-v$VERSION-$ARCH.app"
          ZIP_NAME="pywarp-$ARCH.zip"
          ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" "$ZIP_NAME"

      - name: Validate zip before upload
        run: |
          ARCH="${{ matrix.arch }}"
          if [[ ! -f "pywarp-$ARCH.zip" ]]; then
            echo "❌ Error: zip file not created."
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-${{ matrix.arch }}
          path: pywarp-${{ matrix.arch }}.zip

  merge-macos-universal:
    name: Merge macOS Universal Binary
    runs-on: macos-13
    needs: build-macos-universal
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Unzip .app bundles
        run: |
          unzip artifacts/pywarp-x86_64/pywarp-x86_64.zip -d artifacts/x86
          unzip artifacts/pywarp-arm64/pywarp-arm64.zip -d artifacts/arm

      - name: Merge with lipo
        run: |
          APP_X86="$(find artifacts/x86 -name 'pywarp-v*.app' -type d | head -n1)"
          APP_ARM="$(find artifacts/arm -name 'pywarp-v*.app' -type d | head -n1)"

          if [[ -z "$APP_X86" || -z "$APP_ARM" ]]; then
            echo "❌ Error: One or both .app bundles not found."
            find artifacts
            exit 1
          fi

          BIN_X86="$APP_X86/Contents/MacOS/main"
          BIN_ARM="$APP_ARM/Contents/MacOS/main"

          if [[ ! -f "$BIN_X86" || ! -f "$BIN_ARM" ]]; then
            echo "❌ Error: 'main' executable not found in one of the .app bundles."
            ls "$APP_X86/Contents/MacOS" || true
            ls "$APP_ARM/Contents/MacOS" || true
            exit 1
          fi

          mkdir -p PyWarp.app/Contents/MacOS
          lipo -create "$BIN_X86" "$BIN_ARM" -output PyWarp.app/Contents/MacOS/pywarp
          chmod +x PyWarp.app/Contents/MacOS/pywarp

          cp -R "$APP_ARM/Contents/Resources" PyWarp.app/Contents/
          cp "$APP_ARM/Contents/Info.plist" PyWarp.app/Contents/

          VERSION="$(cat version.txt)"
          mv PyWarp.app "PyWarp-v$VERSION.app"

      - name: Create DMG
        run: |
          VERSION="$(cat version.txt)"
          hdiutil create -volname PyWarp -srcfolder "PyWarp-v$VERSION.app" -ov -format UDZO "pywarp-macos-universal.dmg"

      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-macos-universal
          path: pywarp-macos-universal.dmg

      - name: Cleanup
        run: |
          rm -rf PyWarp-v*.app pywarp-macos-universal.dmg

  release:
    name: Create Release
    runs-on: ubuntu-22.04
    needs: [build-windows, build-linux, merge-macos-universal]
    steps:
      - uses: actions/checkout@v3

      - name: Read Version
        id: version
        run: echo "version=$(cat version.txt)" >> "$GITHUB_OUTPUT"

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Extract Changelog for Release
        id: changelog
        run: |
          VERSION="v${{ steps.version.outputs.version }}"
          awk -v ver="$VERSION" '
            $0 ~ "^## " ver {flag=1; next}
            flag && /^## / {exit}
            flag {print}
          ' CHANGELOG.md > RELEASE_NOTES.md
          echo -e "\n---\nBuilt for Windows, Linux, and macOS (Universal)" >> RELEASE_NOTES.md

      - name: Generate Checksums and Downloads Section
        run: |
          VERSION="v${{ steps.version.outputs.version }}"
          WIN_FILE=$(find artifacts -name "pywarp-windows-*.zip" | head -n1)
          LINUX_FILE=$(find artifacts -name "pywarp-ubuntu-*.tar.gz" | head -n1)
          MAC_FILE=$(find artifacts -name "pywarp-macos-universal.dmg" | head -n1)

          WIN_SHA=$(sha256sum "$WIN_FILE" | cut -d' ' -f1)
          LINUX_SHA=$(sha256sum "$LINUX_FILE" | cut -d' ' -f1)
          MAC_SHA=$(sha256sum "$MAC_FILE" | cut -d' ' -f1)

          {
            echo ""
            echo "### 📦 Downloads"
            echo ""
            echo "| Platform | File | SHA256 Checksum |"
            echo "|----------|------|-----------------|"
            echo "| 🪟 Windows | [Download EXE](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $WIN_FILE)) | \`$WIN_SHA\` |"
            echo "| 🐧 Linux | [Download Binary](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $LINUX_FILE)) | \`$LINUX_SHA\` |"
            echo "| 🍎 macOS | [Download DMG](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $MAC_FILE)) | \`$MAC_SHA\` |"
            echo ""
            echo "To verify integrity:"
            echo "- On macOS/Linux: \`shasum -a 256 filename\`"
            echo "- On Windows (PowerShell): \`Get-FileHash .\\filename -Algorithm SHA256\`"
            echo ""
            echo "---"
            echo ""
            echo "### 🛡 Is it safe?"
            echo ""
            echo "Yes. Some antivirus tools may falsely flag the \`.exe\` because it’s unsigned and built with Nuitka."
            echo ""
            echo "- ✅ Open-source and transparent: [GitHub Repo](https://github.com/${{ github.repository }})"
            echo "- 🔐 We're working on signing future releases"
            echo ""
            echo "If flagged, you can submit the \`.exe\` to Microsoft as a false positive or build it yourself from source."
          } >> RELEASE_NOTES.md

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: PyWarp v${{ steps.version.outputs.version }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: false
          files: |
            artifacts/**/pywarp-windows-*.zip
            artifacts/**/pywarp-ubuntu-*.tar.gz
            artifacts/**/pywarp-macos-universal.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

