name: Build & Release PyWarp v${{ env.APP_VERSION }}

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

env:
  APP_VERSION: 1.2.7

permissions:
  contents: write

jobs:
  validate:
    name: Validate Code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Run Flake8
        run: |
          pip install flake8
          flake8 . || true

  build-windows:
    name: Build Windows (v${{ env.APP_VERSION }})
    runs-on: windows-latest
    needs: validate
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build Executable
        shell: pwsh
        run: |
          $version = "${{ env.APP_VERSION }}"
          python -m nuitka main.py `
            --standalone `
            --onefile `
            --disable-console `
            --enable-plugin=pyside6 `
            --follow-imports `
            --noinclude-pytest-mode=nofollow `
            --noinclude-unittest-mode=nofollow `
            --nofollow-import-to=tkinter,test,pydoc `
            --include-data-dir=assets=assets `
            --include-qt-plugins=all `
            --windows-icon-from-ico=assets/logo.ico `
            --output-dir=dist `
            --output-filename="pywarp-windows-v$version" `
            --windows-company-name="PyWarp" `
            --windows-product-name="PyWarp" `
            --windows-file-version="$version" `
            --windows-product-version="$version" `
            --remove-output `
            --assume-yes-for-downloads
      - name: Zip Executable
        run: |
          cd dist
          powershell Compress-Archive -Path pywarp-windows-v${{ env.APP_VERSION }}.exe -DestinationPath pywarp-windows-v${{ env.APP_VERSION }}.zip
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-windows
          path: dist/pywarp-windows-v${{ env.APP_VERSION }}.zip

  build-linux:
    name: Build Linux (v${{ env.APP_VERSION }})
    runs-on: ubuntu-22.04
    needs: build-windows
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build Executable
        run: |
          python -m nuitka main.py \
            --standalone \
            --onefile \
            --remove-output \
            --disable-console \
            --enable-plugin=pyside6 \
            --include-data-dir=assets=assets \
            --include-qt-plugins=all \
            --output-filename="pywarp-ubuntu-v${{ env.APP_VERSION }}"
      - name: Create tar.gz
        run: |
          tar -czvf pywarp-ubuntu-v${{ env.APP_VERSION }}.tar.gz pywarp-ubuntu-v${{ env.APP_VERSION }}
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-ubuntu
          path: pywarp-ubuntu-v${{ env.APP_VERSION }}.tar.gz

  build-macos-universal:
    name: Build macOS Universal (v${{ env.APP_VERSION }})
    runs-on: macos-13
    strategy:
      matrix:
        arch: [x86_64, arm64]
    needs: build-windows
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install nuitka==1.9.5
      - name: Build PyWarp for ${{ matrix.arch }}
        run: |
          python -m nuitka main.py \
            --standalone \
            --remove-output \
            --disable-console \
            --enable-plugin=pyside6 \
            --macos-create-app-bundle \
            --macos-app-name="pywarp-${{ matrix.arch }}" \
            --macos-app-icon=assets/logo.icns \
            --macos-app-version="${{ env.APP_VERSION }}" \
            --include-data-dir=assets=assets \
            --include-qt-plugins=iconengines,imageformats,platforms,styles,tls,sqldrivers=libqsqlite.dylib \
            --noinclude-dlls=libcrypto.dylib \
            --noinclude-dlls=libssl.dylib \
            --output-dir=. \
            --clang \
            --macos-target-arch=${{ matrix.arch }} \
            --assume-yes-for-downloads \
            --disable-ccache
      - name: Rename .app bundle to include version
        run: |
          if [[ ! -d main.app ]]; then
            echo "‚ùå Error: main.app not found after build."
            find . -maxdepth 2
            exit 1
          fi
          mv main.app "pywarp-v${{ env.APP_VERSION }}-${{ matrix.arch }}.app"
      - name: Zip .app bundle
        run: |
          APP_PATH="pywarp-v${{ env.APP_VERSION }}-${{ matrix.arch }}.app"
          ZIP_NAME="pywarp-${{ matrix.arch }}.zip"
          ditto -c -k --sequesterRsrc --keepParent "$APP_PATH" "$ZIP_NAME"
      - name: Validate zip before upload
        run: |
          if [[ ! -f "pywarp-${{ matrix.arch }}.zip" ]]; then
            echo "‚ùå Error: zip file not created."
            exit 1
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-${{ matrix.arch }}
          path: pywarp-${{ matrix.arch }}.zip

  merge-macos-universal:
    name: Merge & Create macOS Universal DMG (v${{ env.APP_VERSION }})
    runs-on: macos-13
    needs: build-macos-universal
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Unzip .app bundles
        run: |
          mkdir -p artifacts/unzipped
          ditto -x -k artifacts/pywarp-x86_64/pywarp-x86_64.zip artifacts/unzipped
          ditto -x -k artifacts/pywarp-arm64/pywarp-arm64.zip artifacts/unzipped
          echo "Unzipped both .app bundles into artifacts/unzipped"
          find artifacts/unzipped -maxdepth 2
      - name: Create Universal Binary and Merge Bundles
        run: |
          APP_X86=$(find artifacts/unzipped -name '*.app' -path '*x86_64.app' -type d | head -n1)
          APP_ARM=$(find artifacts/unzipped -name '*.app' -path '*arm64.app' -type d | head -n1)

          if [[ -z "$APP_X86" || -z "$APP_ARM" ]]; then
            echo "Error: One or both .app bundles not found after unzipping."
            exit 1
          fi

          echo "Found x86_64 app: $APP_X86"
          echo "Found arm64 app: $APP_ARM"

          BIN_X86="$APP_X86/Contents/MacOS/main"
          BIN_ARM="$APP_ARM/Contents/MacOS/main"

          if [[ ! -f "$BIN_X86" || ! -f "$BIN_ARM" ]]; then
            echo "Error: 'main' executable not found in one or both bundles."
            exit 1
          fi

          UNIVERSAL_APP_PATH="$APP_ARM"
          UNIVERSAL_BIN_PATH="$BIN_ARM"

          echo "Using $UNIVERSAL_APP_PATH as the base for the universal app."

          echo "Creating universal binary with lipo..."
          lipo -create "$BIN_X86" "$BIN_ARM" -output "$UNIVERSAL_BIN_PATH"
          chmod +x "$UNIVERSAL_BIN_PATH"

          echo "Copying x86_64 frameworks and plugins..."
          if [ -d "$APP_X86/Contents/Frameworks" ]; then
            cp -R "$APP_X86/Contents/Frameworks/." "$UNIVERSAL_APP_PATH/Contents/Frameworks/"
          fi
          if [ -d "$APP_X86/Contents/Plugins" ]; then
            cp -R "$APP_X86/Contents/Plugins/." "$UNIVERSAL_APP_PATH/Contents/Plugins/"
          fi
          
          mv "$UNIVERSAL_APP_PATH" "PyWarp-v${{ env.APP_VERSION }}.app"
          echo "Successfully created universal app: PyWarp-v${{ env.APP_VERSION }}.app"
      - name: Create DMG
        run: |
          hdiutil create \
            -volname "PyWarp" \
            -srcfolder "PyWarp-v${{ env.APP_VERSION }}.app" \
            -format UDZO \
            -ov \
            -o "./pywarp-macos-universal-v${{ env.APP_VERSION }}.dmg"
      - uses: actions/upload-artifact@v4
        with:
          name: pywarp-macos-universal
          path: pywarp-macos-universal-v${{ env.APP_VERSION }}.dmg
      - name: Cleanup
        run: |
          rm -rf PyWarp-v*.app pywarp-macos-universal-v*.dmg

  release:
    name: Create GitHub Release (v${{ env.APP_VERSION }})
    runs-on: ubuntu-22.04
    needs: [build-windows, build-linux, merge-macos-universal]
    steps:
      - uses: actions/checkout@v4
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Extract Changelog for Release
        run: |
          awk -v ver="v${{ env.APP_VERSION }}" '
            $0 ~ "^## " ver {flag=1; next}
            flag && /^## / {exit}
            flag {print}
          ' CHANGELOG.md > RELEASE_NOTES.md
          echo -e "\n---\nBuilt for Windows, Linux, and macOS (Universal)" >> RELEASE_NOTES.md
      - name: Generate Checksums and Downloads Section
        run: |
          VERSION="v${{ env.APP_VERSION }}"
          WIN_FILE=$(find artifacts -name "pywarp-windows-*.zip" | head -n1)
          LINUX_FILE=$(find artifacts -name "pywarp-ubuntu-*.tar.gz" | head -n1)
          MAC_FILE=$(find artifacts -name "pywarp-macos-universal-*.dmg" | head -n1)

          WIN_SHA=$(sha256sum "$WIN_FILE" | cut -d' ' -f1)
          LINUX_SHA=$(sha256sum "$LINUX_FILE" | cut -d' ' -f1)
          MAC_SHA=$(sha256sum "$MAC_FILE" | cut -d' ' -f1)

          {
            echo ""
            echo "### üì¶ Downloads"
            echo ""
            echo "| Platform | File | SHA256 Checksum |"
            echo "|----------|------|-----------------|"
            echo "| ü™ü Windows | [Download EXE](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $WIN_FILE)) | \`$WIN_SHA\` |"
            echo "| üêß Linux | [Download Binary](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $LINUX_FILE)) | \`$LINUX_SHA\` |"
            echo "| üçé macOS | [Download DMG](https://github.com/${{ github.repository }}/releases/download/$VERSION/$(basename $MAC_FILE)) | \`$MAC_SHA\` |"
            echo ""
            echo "To verify integrity:"
            echo "- On macOS/Linux: \`shasum -a 256 filename\`"
            echo "- On Windows (PowerShell): \`Get-FileHash .\\filename -Algorithm SHA256\`"
            echo ""
            echo "---"
            echo ""
            echo "### üõ° Is it safe?"
            echo ""
            echo "Yes. Some antivirus tools may falsely flag the \`.exe\` because it‚Äôs unsigned and built with Nuitka."
            echo ""
            echo "- ‚úÖ Open-source and transparent: [GitHub Repo](https://github.com/${{ github.repository }})"
            echo "- üîê We're working on signing future releases"
            echo ""
            echo "If flagged, you can submit the \`.exe\` to Microsoft as a false positive or build it yourself from source."
          } >> RELEASE_NOTES.md
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.APP_VERSION }}
          name: PyWarp v${{ env.APP_VERSION }}
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: true
          files: |
            artifacts/**/pywarp-windows-*.zip
            artifacts/**/pywarp-ubuntu-*.tar.gz
            artifacts/**/pywarp-macos-universal-*.dmg
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}